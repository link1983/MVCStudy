1、web被设计之初就是B/S结构，浏览器只负责发出请求request，服务器负责接收和反馈请求response，所以html文件只提供表单form来提交数据，但是不能作为form中的action参数来接收数据。action的目标必须是后台后端语言编写的页面。
2、后端语言php、asp等都有相关的CGI程序来实现request对象的访问，如request.XXX获取表单提交的数据，后端语言逻辑处理后，把数据填到html里渲染成页面返回给浏览器完成response。
相反，任何浏览器必须实现response对象来获取后端的反馈信息，如response.XXX,只是浏览器默认把整个网页给呈现出来，但是浏览器都有个XMLHttpRequest对象，可以用来异步提交和获取服务器反馈，而不用刷新整个页面。用JS操作反馈的页面的DOM元素，取得部分内容用来改变当前页面内容，就实现了AJAX。
3、浏览器终端获取到的页面都是一份份副本，哪怕是纯html文件，是无状态的，各自独立。通过浏览器cookies或服务器session来区分和存储客户端数据。
4、通过JS可以获取到form的Get型数据，因为Get数据是明文写在url中的，JS有函数获取，但是无法获取Post数据，Post数据必须使用后端语言获取并处理。
5、ASP.Net只所以能保持页面状态，因为独创了ViewState概念，每次提交都会额外发送页面上所有服务器控件的值，返回时又把这些值传回到客户端。虽然这样提供了类似Windows窗口的操作（所以称为WebForm），但是流量和服务器负担明显更大。
6、php、asp等早期动态后端语言，页面html元素和后端服务器代码在同一个文件里，不利于分工和维护。
7、MVC通过约定和规范，把代码人为分成Models、Views、Controllers三部分，运行时通过内部MVC实现程序自动把数据和html渲染成页面传给客户端。虽然Views里不是纯粹的html代码，含有循环、判断等语句（模板引擎语言），但是这都是为了方便组织显示页面而已，其它数据库操作、逻辑处理等代码都分离到了Models和Controllers等纯后端语言文件里。
8、随着移动互联网兴起，单页面web应用、多平台终端、高性能浏览器成为主流，原来的后端渲染页面向后端提供数据API，一次后端编程，多种终端通用，由前端异步获取数据渲染页面逐渐流行，这时各种前端框架就开始兴起，如Agular.js、Vue.js、React.js。
9、前端框架使开发不再通过原生JS或JQuery直接操作DOM，而是提供像原来后端程序一样，把变量直接绑定到html元素中的语法和实现。
10、既然JS能实现前端框架进行网页渲染，那么同理用在后端进行渲染就顺理成章，于是产生了后端Node.js。
11、网页由html、CSS、JS组成，JS有框架，CSS也有框架，如Bootstrap.css，利用css框架可以快速搭建风格统一、兼容性强的网页UI。
12、前端程序员并不仅仅是UI美工，而是在前端实现渲染页面的程序员，工作内容比后端可能更多。