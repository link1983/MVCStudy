1、MVC优势首先是解耦，可维护性高，容易测试。程序员和美工共同关注的部分是业务实体即数据模型，其它的代码中的变量和逻辑美工并不关心。Webform前台页面不是标准的html，美工制作好html后，程序员需要替换大量webform特有的代码，而mvc视图使用的是标准的html，程序员拿到美工的html后，只要添加一些Razor逻辑代码就行。程序员在没有美工最终的html时，也可以使用简单的测试views进行观察和测试，最终再替换美工做的views。中间过程变量可以使用viewbag.XXX在view中调用，这些变量可以在美工设计好views后添加进去，由于不是业务实体，而是逻辑变量，所以不影响整个布局。这在php、asp混合编程是很难做到的，WebForm也不行，因为webform页面和后台编码其实是同一个类，后台代码充满了前台控件的调用，所以无法分工。
2、MVC语言上的原理是“依赖注入”。A要调用B，但是不能在编译时就依赖B，因为后期可能要换B1、B2或换B测试版。可以想到，在A和B中间加接口IB，但是使用的时候还是需要依赖IB的具体实现。把IB作为参数传给A，A编译时只依赖IB，运行时才决定B的实现，就叫做依赖注入。该原理实现了MVC各层分离，又能代码智能提示。
3、view中@model后跟模型，是为了能在view里进行模型的属性智能提示。而属性的值需要在control中return view（模型）里具体传入。模型可以是任何系统或自定义的类型，只能传一个模型。如果一次要传多个数据，那么用viewbag，viewbag.多个模型或变量。
4、控制器动作的默认视图时和动作同名的视图return view(),但是可以指定任何其它视图return view(xxx)。
5、一般的视图都是放在同名控制器的目录下，控制器自动会去同名目录和动作同名的view。为了规范化，属于多个控制器的view放在Views/shared里。即没有专属控制器的视图放在Shared里。
6、调试时，会自动运行当前编辑的文件，但是Shared视图时没有专属控制器的，所以会无法运行，建议在项目属性-web：设定指定页留空，调试时就会以默认页开始。
7、路由并不是MVC特有，WebForm也有，路由只是一种模式匹配（正则表达式）功能，把URL模式匹配后分解成几个字符串，然后再给webform或MVC来进行使用。
8、因为确定哪条路由是url字符串的模式匹配的，所以不必拘泥于“/”分割，任何形式字符串都可以，如{Controller}do{Action}。
这样Url就可以设计成有意义的字符串，有利于SEO，比如：http://www.ywzyy.com/introduceofdepartment。  添加路由{action}of{controller}
9、多条路由是按顺序匹配的，匹配到一个就会终止。
10、MVC一大优势是所有页面都是url中匹配出Controller和Action得来，那么无论URL如何改变，只要url字符串中含有原来的controller和action的名字就没关系，改下匹配模式而已。视图中的各种链接不要用url写死，使用@html.ActionLink代替动态转为URL。这样URL规划改变时，所有网页中的url都不需要改变，这点WebForm是无法实现的。
11、因为MVC默认只有一套Controllers和Views文件夹，如果项目较大，把所有功能不同的模块都放在一起，结构很混乱。这时使用area来新增多套MVC脚手架。
12、图片、声音等静态资源不是由控制器和视图产生的，所以也需要路由来指定位置，默认先按照url路径来寻找物理文件，也可以通过路由系统来自定义。
13、RedirectionToAction动作跳转到另一动作如何传递值？使用TempData[XXX],类似于session，只是数据被下次提取后就删除了。如果要长期保存，使用session。
14、过滤器：利用注解属性写在不同的位置，进行自定义范围操作，比如权限验证。可以写在控制器上或动作上来进行不同粒度的控制。
注解属性一般出现在框架设计上，为框架使用者在开发时动态指定操作。这些操作一般和框架中的业务不相关，所以不直接和业务代码写在一起，提高了可读性。比如权限验证接口代码如果和某个简历显示控制器写在一起，两个业务没有直接关系，可读性很差。
15、辅助方法
16、Web API架构和MVC类似，但是只提供数据，没有视图。如果项目只选Web API，那么只能给其它程序提供数据。如果要制作单页面程序，那么需要建立MVC项目，勾选MVC和API两个核心，MVC里实现一个或多个功能页面，这个页面通过前端进行AJAX调用API获取数据。Web API通过路由把http方法和MVC的动作进行映射，动作返回的不是视图，而是json格式的业务对象（Restful接口）。
17、采用Vue等前端框架的好处是，开发时前后端完全分离，过去是美工设计好静态页面扔给后端，后端即写业务逻辑又要负责把静态页面改成服务器端混合视图的页面；现在是前后端约定好数据格式后同时开工，美工设计好静态视图给前端工程师，同时后端编写业务逻辑，最后前端调用WebAPI即可，后端程序员完全不用在意前端。